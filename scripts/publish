#!/usr/bin/env bash

set -Eeu
set -o pipefail dotglob nullglob failglob

# Environments
{
  cd -- "$(dirname -- "$0")/.."
  GIT_REPO="${GIT_REPO:-"$(basename -- "$PWD")"}"
  if [[ -z ${CI:-""} ]]; then
    GIT_TAG="$(git tag --list --sort '-taggerdate' -- 'v*' | head -1)"
  fi
  VERSION="${GIT_TAG#v}"
  NAME_PREFIX="${GIT_REPO}_${VERSION}"
  MANIFEST="${NAME_PREFIX}_manifest.json"
  DIST="$PWD/dist"
  SHAFILE="${NAME_PREFIX}_SHA256SUMS"
  SIGFILE="$SHAFILE.sig"
}

# Pipelines
{
  FLAG='release.trigger'
  MAP=(xargs --no-run-if-empty -I % --)
  FIND_FLAGGED=(gh release view --json 'tagName,isPrerelease,assets,createdAt' --jq "if .isPrerelease and any(.assets[]; .name == \"$FLAG\") then . else null end" --)
  # shellcheck disable=2016
  FIND_TIMESTAMP=(jq --exit-status --arg tag "$GIT_TAG" 'select(.tagName == $tag).createdAt | fromdateiso8601')
  SELECT_TAGNAME=(jq --raw-output 'select(.).tagName')
  REMOVE=(gh release delete --yes --)
}

if [[ -n ${GPG_SIGNING_PASSWORD:-""} ]] && [[ -n ${GPG_SIGNING_KEY:-""} ]]; then
  tee -- <<- 'EOF' >&2
==> Importing GPG key
EOF

  printenv -- GPG_SIGNING_KEY | gpg --batch --passphrase-fd 3 --import 3<<< "$GPG_SIGNING_PASSWORD"
elif [[ -n ${CI:-""} ]]; then
  tee -- <<- 'EOF' >&2
GPG_SIGNING_PASSWORD, GPG_SIGNING_KEY must be set
EOF

  exit 1
fi

if [[ -n ${CI:-""} ]]; then
  tee -- <<- 'EOF' >&2
==> Checking pre-releases
EOF

  set -x
  if ! TIMESTAMP="$("${FIND_FLAGGED[@]}" "$GIT_TAG" | "${FIND_TIMESTAMP[@]}")"; then
    set +x
    tee -- <<- EOF >&2
Release "$GIT_TAG" is not found in the list of pre-releases
This might have happened because "$GIT_TAG" has been superseded by a later release
EOF

    exit 1
  fi
  set +x
fi

{
  tee -- <<- 'EOF' >&2
==> Compiling binaries
EOF

  SKIP=(--skip publish)
  if [[ -z ${CI:-""} ]]; then
    SKIP+=(--skip validate)
  fi

  set -x
  GORELEASER_CURRENT_TAG="$GIT_TAG" goreleaser release --clean "${SKIP[@]}"
  set +x
}

{
  tee -- <<- 'EOF' >&2
==> Generating checksum
EOF

  cp -v -- ./terraform-registry-manifest.json "$DIST/$MANIFEST"
  pushd -- "$DIST" > /dev/null
  sha256sum -- "$MANIFEST" *.zip | tee -- "$SHAFILE" >&2
}

{
  tee -- <<- 'EOF' >&2
==> Generating signature
EOF

  GPG_FINGERPRINT="${GPG_FINGERPRINT:-"$(gpg --batch --list-keys --with-colons | awk -F : -- '/^pub:/ { getline; print $10 }' | tail -1)"}"
  gpg --batch --pinentry-mode loopback --passphrase-fd 0 --detach-sign --local-user "$GPG_FINGERPRINT" --output "$SIGFILE" -- "$SHAFILE" <<< "${GPG_SIGNING_PASSWORD:-""}"
}

if [[ -n ${CI:-""} ]]; then
  tee -- <<- 'EOF' >&2
==> Publishing release
EOF

  LATEST_TAG="$(gh release list --limit 1 --json 'tagName' --jq '.[].tagName')"
  set -x
  if [[ $GIT_TAG == "$LATEST_TAG" ]] && ! grep --quiet -e '-alpha$' -e '-beta$' <<< "$GIT_TAG"; then
    RELEASE_ARGS=(--latest)
  else
    RELEASE_ARGS=()
  fi

  gh release upload --clobber -- "$GIT_TAG" "$MANIFEST" "$SHAFILE" "$SIGFILE" *.zip
  popd > /dev/null
  gh release delete-asset --yes -- "$GIT_TAG" "$FLAG"
  gh release edit --verify-tag --prerelease=false "${RELEASE_ARGS[@]}" -- "$GIT_TAG"
  set +x
fi

if [[ -n ${CI:-""} ]]; then
  tee -- <<- 'EOF' >&2
==> Cleaning failed releases
EOF

  TMP="$(mktemp)"
  LIST_PREV=(gh release list --limit 99999 --json 'tagName,isPrerelease,createdAt' --jq ".[] | select(.isPrerelease and (.createdAt | fromdateiso8601) < $TIMESTAMP).tagName")
  set -x
  "${LIST_PREV[@]}" | "${MAP[@]}" "${FIND_FLAGGED[@]}" % | "${SELECT_TAGNAME[@]}" | tee -- "$TMP" | "${MAP[@]}" "${REMOVE[@]}" %
  set +x
  if [[ -s $TMP ]]; then
    tee -- <<- 'EOF'
The following releases have been cleaned up:
EOF
    nl -- "$TMP"
  fi >&2
fi
